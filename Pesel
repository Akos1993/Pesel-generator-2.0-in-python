import random
import pandas as pd

class Person:
    def __init__(self, name, surname, sex, dob, pesel_number):
        self.name = name
        self.surname = surname
        self.sex = sex
        self.dob = dob
        self.pesel_number = pesel_number


class Pesel:
    def __init__(self, person):
        self.person = person

    def generate(self):
        # Extract date of birth components
        year = self.person.dob.year
        month = self.person.dob.month
        day = self.person.dob.day

        # Encode century information in the month
        if 1800 <= year < 1900:
            month += 80
        elif 1900 <= year < 2000:
            month += 0
        elif 2000 <= year < 2100:
            month += 20
        elif 2100 <= year < 2200:
            month += 40
        elif 2200 <= year < 2300:
            month += 60
        
        # Generate random ZZZ (unique identification number)
        zzz = random.randint(0, 999)
        zzz_str = str(zzz).zfill(3)

        # Determine sex digit (X)
        sex_digit = 1 if self.person.sex.lower() == 'male' else 0
        if sex_digit == 1:
            sex_digit = random.choice([1, 3, 5, 7, 9])
        else:
            sex_digit = random.choice([0, 2, 4, 6, 8])


        # Construct the PESEL without the check digit
        pesel_without_check_digit = f"{year % 100:02}{month:02}{day:02}{zzz_str}{sex_digit}"

        # Calculate the check digit (Q)
        weights = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1]
        check_sum = 0
        for i in range(11):
          check_sum += int(pesel_without_check_digit[i]) * weights[i]

        check_digit = (10 - (check_sum % 10)) % 10

        # Complete the PESEL with the check digit
        pesel = pesel_without_check_digit + str(check_digit)

        return pesel

     def check_pesel_exists(self, pesel):
      try:
        df = pd.read_csv(self.db_filepath) # Assuming your DB is a CSV file. Adapt as needed for other formats.
        return pesel in df['pesel'].values # Assuming 'pesel' is the column name in your DB
      except FileNotFoundError:
        print(f"Error: Database file not found at {self.db_filepath}")
        return False # or raise the exception if preferred
      except KeyError:
        print("Error: 'pesel' column not found in the database.")
        return False
      except Exception as e:
        print(f"An error occurred: {e}")
        return False
    
