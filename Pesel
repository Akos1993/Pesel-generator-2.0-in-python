import random
import pandas as pd

class Person:
    def __init__(self, name, surname, sex, dob, pesel_number=None):
        self.name = name
        self.surname = surname
        self.sex = sex
        self.dob = dob
        self.pesel_number = pesel_number


class Pesel:
    def __init__(self, person, db_filepath):
        self.person = person
        self.db_filepath = db_filepath

    def generate(self):
        # Extract date of birth components
        year = self.person.dob.year
        month = self.person.dob.month
        day = self.person.dob.day

        # Encode century information in the month
        if 1800 <= year < 1900:
            month += 80
        elif 1900 <= year < 2000:
            month += 0
        elif 2000 <= year < 2100:
            month += 20
        elif 2100 <= year < 2200:
            month += 40
        elif 2200 <= year < 2300:
            month += 60
        
        # Generate random ZZZ (unique identification number)
        zzz = random.randint(0, 999)
        zzz_str = str(zzz).zfill(3)

        # Determine sex digit (X)
        sex_digit = 1 if self.person.sex.lower() == 'male' else 0
        if sex_digit == 1:
            sex_digit = random.choice([1, 3, 5, 7, 9])
        else:
            sex_digit = random.choice([0, 2, 4, 6, 8])


        # Construct the PESEL without the check digit
        pesel_without_check_digit = f"{year % 100:02}{month:02}{day:02}{zzz_str}{sex_digit}"

        # Calculate the check digit (Q)
        weights = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1]
        check_sum = 0
        for i in range(11):
          check_sum += int(pesel_without_check_digit[i]) * weights[i]

        check_digit = (10 - (check_sum % 10)) % 10

        # Complete the PESEL with the check digit
        pesel = pesel_without_check_digit + str(check_digit)

        return pesel
    
   def check_pesel_exists(self, db_path):
      """
      Checks if the generated PESEL already exists in the SQL database.
      """
      try:
          # Connect to the SQLite database
          conn = sqlite3.connect(db_path)
          # Read the table into a pandas DataFrame
          df = pd.read_sql_query("SELECT pesel_number FROM persons", conn) # Replace 'persons' with your actual table name
          conn.close()

          # Check if the generated PESEL exists in the DataFrame
          pesel = self.generate()
          return pesel in df['pesel_number'].values
      except Exception as e:
          print(f"Error checking PESEL in database: {e}")
          return False # Or handle the error as appropriate for your application
    def assign_unique_pesel(self):
        """
        Generates and assigns a unique PESEL number to the person.
        """
        pesel = self.generate()
        while self.check_pesel_exists(pesel):
            pesel = self.generate()
        self.person.pesel_number = pesel

    def add_to_database(self):
        try:
            conn = sqlite3.connect(self.db_filepath)
            cursor = conn.cursor()

            # Check if the table exists, create it if it doesn't
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS persons (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    surname TEXT NOT NULL,
                    sex TEXT NOT NULL,
                    dob DATE NOT NULL,
                    pesel_number TEXT UNIQUE NOT NULL
                )
            ''')

            # Insert the person's data into the table
            cursor.execute('''
                INSERT INTO persons (name, surname, sex, dob, pesel_number)
                VALUES (?, ?, ?, ?, ?)
            ''', (self.person.name, self.person.surname, self.person.sex, self.person.dob, self.person.pesel_number))

            conn.commit()
            conn.close()
            print(f"Person with PESEL {self.person.pesel_number} added to the database.")

        except sqlite3.IntegrityError:
            print(f"Error: PESEL {self.person.pesel_number} already exists in the database.")
        except Exception as e:
            print(f"An error occurred: {e}")

    def search_database(self, search_term, column="pesel_number"):
        """
        Searches the SQLite database for a specific term in a given column.

        Args:
            search_term: The term to search for.
            column: The column to search in (default is "pesel_number").

        Returns:
            A pandas DataFrame containing the search results, or None if an error occurs.
        """
        try:
            conn = sqlite3.connect(self.db_filepath)
            query = f"SELECT * FROM persons WHERE {column} LIKE ?"  # Use parameterized query to prevent SQL injection
            df = pd.read_sql_query(query, conn, params=[f"%{search_term}%"])  # Use % for wildcard search
            conn.close()
            return df
        except Exception as e:
            print(f"Error searching the database: {e}")
            return None
